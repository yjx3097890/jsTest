<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
<body>
    <script src="../../script/jscex.jscexRequire.min.js" type="text/javascript"></script>
    <script src="../../script/Vector3.js" type="text/javascript"></script>
<canvas id="myCanvas4" style="background-color: #111;" width="700" height="500">Your browser does not support the canvas element. </canvas>
<script type="text/javascript">
    var canvas = document.getElementById("myCanvas4");
    var cxt = canvas.getContext("2d");
    cxt.lineWidth = 3;
    var Points = [];
    var translateX = 250;
    var translateY = 250;
    var distance3 = 500;
    var eyePosition4 = { x: 0, y: 0, z: 700 };
    cxt.translate(translateX, translateY);
    cxt.scale(1, -1);
    function init() {
        Points[0] = new Vector3(100, 100, 100);
        Points[1] = new Vector3(100, 100, -100);
        Points[2] = new Vector3(-100, 100, -100);
        Points[3] = new Vector3(-100, 100, 100);
        Points[4] = new Vector3(100, -100, 100);
        Points[5] = new Vector3(100, -100, -100);
        Points[6] = new Vector3(-100, -100, -100);
        Points[7] = new Vector3(-100, -100, 100)
    }
    function changedistance() {
        for (var i = 0; i < Points.length; i++) {
            Points[i].x = Points[i].x * distance3 / Math.abs(eyePosition4.z - Points[i].z);
            Points[i].y = Points[i].y * distance3 / Math.abs(eyePosition4.z - Points[i].z);
        }
    }
    var currentAngle = 0;
    var drawCube = function () {    
        cxt.strokeStyle = randomColor();
        cxt.beginPath();
        cxt.moveTo(Points[0].x, Points[0].y);
        cxt.lineTo(Points[1].x, Points[1].y);
        cxt.lineTo(Points[2].x, Points[2].y);
        cxt.lineTo(Points[3].x, Points[3].y);
        cxt.lineTo(Points[0].x, Points[0].y);
        cxt.moveTo(Points[4].x, Points[4].y);
        cxt.lineTo(Points[5].x, Points[5].y);
        cxt.lineTo(Points[6].x, Points[6].y);
        cxt.lineTo(Points[7].x, Points[7].y);
        cxt.lineTo(Points[4].x, Points[4].y);
        cxt.moveTo(Points[1].x, Points[1].y);
        cxt.lineTo(Points[5].x, Points[5].y);
        cxt.moveTo(Points[0].x, Points[0].y);
        cxt.lineTo(Points[4].x, Points[4].y);
        cxt.moveTo(Points[2].x, Points[2].y);
        cxt.lineTo(Points[6].x, Points[6].y);
        cxt.moveTo(Points[3].x, Points[3].y);
        cxt.lineTo(Points[7].x, Points[7].y);
        cxt.stroke();
    }
    init();
    drawCube();
    var rotateAsync = eval(Jscex.compile("async", function () {
        while (true) {
            cxt.clearRect(-translateX, -translateY, canvas.width, canvas.height);
            init();
            rotate(degToRad(currentAngle));
            currentAngle += 5;
            changedistance();
            drawCube();
            $await(Jscex.Async.sleep(100));
        }
    }));
    function degToRad(a) {
        return a*Math.PI/180;
    }
    function rotate(angle) {
        for (var i = 0; i < Points.length; i++) {
            var tempX = Points[i].x;
            var tempZ = Points[i].z;
            Points[i].x = Points[i].x * Math.cos(angle) + Points[i].z * Math.sin(angle);
            Points[i].z = Points[i].z * Math.cos(angle) - tempX * Math.sin(angle);
        }
        for (var i = 0; i < Points.length; i++) {
            var tempY = Points[i].y;
            Points[i].y = Points[i].y * Math.cos(angle) - Points[i].z * Math.sin(angle);
            Points[i].z = tempY * Math.sin(angle) + Points[i].z * Math.cos(angle);
        }
    }
    function randomColor() {
        var arrHex = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]; var strHex = "#";
        var index;
        for (var i = 0; i < 6; i++) {
            index = Math.round(Math.random() * 15);
            strHex += arrHex[index];
        }
        return strHex;
    }
    rotateAsync().start();
    </script>
</body>
</html>

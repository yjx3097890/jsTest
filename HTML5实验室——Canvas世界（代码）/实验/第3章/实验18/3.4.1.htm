<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
<body>
    <script src="../../script/Vector3.js" type="text/javascript"></script>
    <script src="../../script/jscex.jscexRequire.min.js" type="text/javascript"></script>
    <canvas id="myCanvas" width="500" height="500" style="border: 1px solid #c3c3c3;">
Your browser does not support the canvas element.
</canvas>
    <script type="text/javascript">
        var canvas = document.getElementById("myCanvas");
        var cxt = canvas.getContext("2d");
        cxt.translate(250, 250);
        cxt.scale(1, -1);
        cxt.lineWidth = 3;
        var Points = [];
        function init() {
            Points[0] = new Vector3(-300, -100, 100);
            Points[1] = new Vector3(-100, -100, 100);
            Points[2] = new Vector3(-100, -100, 300);
            Points[3] = new Vector3(100, -100, 300);
            Points[4] = new Vector3(100, -100, 100);
            Points[5] = new Vector3(300, -100, 100);
            Points[6] = new Vector3(300, -100, -100);
            Points[7] = new Vector3(100, -100, -100);
            Points[8] = new Vector3(100, -100, -300);
            Points[9] = new Vector3(-100, -100, -300);
            Points[10] = new Vector3(-100, -100, -100);
            Points[11] = new Vector3(-300, -100, -100);
        }

        var distance = 500;
        var eyePosition = new Vector3(0, 0, 700)
        function projection() {
            for (var i = 0; i < Points.length; i++) {
                Points[i].x = Points[i].x * distance / Math.abs(eyePosition.z - Points[i].z);
                Points[i].y = Points[i].y * distance / Math.abs(eyePosition.z - Points[i].z);
            }
        }

        init();
        projection();
        function drawCube() {
            cxt.beginPath();
            cxt.moveTo(Points[0].x, Points[0].y);
            cxt.lineTo(Points[1].x, Points[1].y);
            cxt.lineTo(Points[2].x, Points[2].y);
            cxt.lineTo(Points[3].x, Points[3].y);
            cxt.lineTo(Points[4].x, Points[4].y);
            cxt.lineTo(Points[5].x, Points[5].y);
            cxt.lineTo(Points[6].x, Points[6].y);
            cxt.lineTo(Points[7].x, Points[7].y);
            cxt.lineTo(Points[8].x, Points[8].y);
            cxt.lineTo(Points[9].x, Points[9].y);
            cxt.lineTo(Points[10].x, Points[10].y);
            cxt.lineTo(Points[11].x, Points[11].y);
            cxt.lineTo(Points[0].x, Points[0].y);
            cxt.moveTo(Points[1].x, Points[1].y);
            cxt.lineTo(Points[4].x, Points[4].y);
            cxt.lineTo(Points[7].x, Points[7].y);
            cxt.lineTo(Points[10].x, Points[10].y);
            cxt.lineTo(Points[1].x, Points[1].y);
            cxt.stroke();
        }
        drawCube();
        var rAngle = 0;
        var varyAsync1 = eval(Jscex.compile("async", function () {

            while (true) {
                try {
                    if (rAngle >= 360) {
                        rAngle = 0;
                        break;
                    }
                    cxt.clearRect(-250, -250, canvas.width, canvas.height);

                    rAngle += 5;
                    Points[5].rotateZSelf(Points[4], 5);
                    Points[6].rotateZSelf(Points[7], 5);
                    drawCube();
                    $await(Jscex.Async.sleep(60));
                }
                catch (e) {
                    alert(e);
                }
            }


        }))

        var tempPonits=[];
        var varyAsync2 = eval(Jscex.compile("async", function () {

            while (true) {
                try {
                    if (Math.abs(rAngle) >= 360) {
                        rAngle = 0;
                        break;
                    }
                    rAngle -= 5;
                    cxt.clearRect(-250, -250, canvas.width, canvas.height);
                    Points[0].rotateZSelf(Points[1], -5);
                    Points[11].rotateZSelf(Points[10], -5);



                    drawCube();
                    $await(Jscex.Async.sleep(60));
                }
                catch (e) {
                    alert(e);
                }
            }


        }))

        var varyAsync3 = eval(Jscex.compile("async", function () {

            while (true) {
                try {
                                                            if (Math.abs( rAngle )>= 360) {
                                                                rAngle = 0;
                                                                break;
                                                            }
               
                    init();
                    rAngle += -5;
                    cxt.clearRect(-250, -250, canvas.width, canvas.height);
                    Points[2].rotateXSelf(Points[1], rAngle);
                    Points[3].rotateXSelf(Points[4], rAngle);

                    projection();
                    drawCube();
                    $await(Jscex.Async.sleep(160));
                }
                catch (e) {
                    alert(e);
                }
            }


        }))

        var executeAsyncQueue = eval(Jscex.compile("async", function () {

            $await(varyAsync1());
            $await(varyAsync2());
            $await(varyAsync3());
        }))
        executeAsyncQueue().start();
    </script>
  
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
<body>
    <script src="../../script/Vector3.js" type="text/javascript"></script>
    <script src="../../script/jscex.jscexRequire.min.js" type="text/javascript"></script>
    <canvas id="myCanvas" width="500" height="500" style="border: 1px solid #c3c3c3;">
Your browser does not support the canvas element.
</canvas>
    <script type="text/javascript">
        var canvas = document.getElementById("myCanvas");
        var cxt = canvas.getContext("2d");
        cxt.translate(250, 250);
        cxt.scale(1, -1);
        cxt.lineWidth = 3;
        var Points = [];
        function init() {
            Points[0] = new Vector3(-300, -100, 100);
            Points[1] = new Vector3(-100, -100, 100);
            Points[2] = new Vector3(-100, -100, 300);
            Points[3] = new Vector3(100, -100, 300);
            Points[4] = new Vector3(100, -100, 100);
            Points[5] = new Vector3(300, -100, 100);
            Points[6] = new Vector3(300, -100, -100);
            Points[7] = new Vector3(100, -100, -100);
            Points[8] = new Vector3(100, -100, -300);
            Points[9] = new Vector3(-100, -100, -300);
            Points[10] = new Vector3(-100, -100, -100);
            Points[11] = new Vector3(-300, -100, -100);
        }
        var showPoints = [];
        var distance = 500;
        var eyePosition = new Vector3(0, 0, 700)
        function projection() {
            showPoints.length = 0;
            for (var i = 0; i < Points.length; i++) {
                var tempP = new Vector3();
                tempP.x = Points[i].x * distance / Math.abs(eyePosition.z - Points[i].z);
                tempP.y = Points[i].y * distance / Math.abs(eyePosition.z - Points[i].z);
                showPoints.push(tempP);
            }
        }

        init();
        projection();
        function drawCube() {
            cxt.beginPath();
            cxt.moveTo(showPoints[0].x, showPoints[0].y);
            cxt.lineTo(showPoints[1].x, showPoints[1].y);
            cxt.lineTo(showPoints[2].x, showPoints[2].y);
            cxt.lineTo(showPoints[3].x, showPoints[3].y);
            cxt.lineTo(showPoints[4].x, showPoints[4].y);
            cxt.lineTo(showPoints[5].x, showPoints[5].y);
            cxt.lineTo(showPoints[6].x, showPoints[6].y);
            cxt.lineTo(showPoints[7].x, showPoints[7].y);
            cxt.lineTo(showPoints[8].x, showPoints[8].y);
            cxt.lineTo(showPoints[9].x, showPoints[9].y);
            cxt.lineTo(showPoints[10].x, showPoints[10].y);
            cxt.lineTo(showPoints[11].x, showPoints[11].y);
            cxt.lineTo(showPoints[0].x, showPoints[0].y);
            cxt.moveTo(showPoints[1].x, showPoints[1].y);
            cxt.lineTo(showPoints[4].x, showPoints[4].y);
            cxt.lineTo(showPoints[7].x, showPoints[7].y);
            cxt.lineTo(showPoints[10].x, showPoints[10].y);
            cxt.lineTo(showPoints[1].x, showPoints[1].y);
            cxt.stroke();
        }
        drawCube();
        var rAngle = 0;
        var step = 5;
        var varyAsync1 = eval(Jscex.compile("async", function () {
            while (true) {
                while (true) {
                    try {
                        if (rAngle >= 40) {
                            step *= -1;
                            rAngle = 0;
                            break;
                        }
                        cxt.clearRect(-250, -250, canvas.width, canvas.height);

                        rAngle += 5;
                        Points[5].rotateZSelf(Points[4], step);
                        Points[6].rotateZSelf(Points[7], step);

                        Points[0].rotateZSelf(Points[1], -step);
                        Points[11].rotateZSelf(Points[10], -step);
                        projection();
                        drawCube();
                        $await(Jscex.Async.sleep(15));
                    }
                    catch (e) {
                        alert(e);
                    }
                }

            }
        }))

      

     

        var varyAsync3 = eval(Jscex.compile("async", function () {

            while (true) {
                try {
                    if (Math.abs(rAngle) >= 360) {
                        rAngle = 0;
                        break;
                    }

                    init();
                    rAngle += -5;
                    cxt.clearRect(-250, -250, canvas.width, canvas.height);
                    Points[2].rotateXSelf(Points[1], rAngle);
                    Points[3].rotateXSelf(Points[4], rAngle);

                    projection();
                    drawCube();
                    $await(Jscex.Async.sleep(160));
                }
                catch (e) {
                    alert(e);
                }
            }


        }))

        var executeAsyncQueue = eval(Jscex.compile("async", function () {
            $await(varyAsync3());
        }))
        executeAsyncQueue().start();
    </script>
  
</body>
</html>

<!DOCTYPE html>
<html>
<head>
    <title></title>
</head>
<body>
   
    <script src="../../script/jscex.jscexRequire.min.js" type="text/javascript"></script>
    <canvas id="myCanvas" width="600" height="150" style="border: 15px solid gray; -moz-border-radius-bottomleft: 40px;
        -moz-border-radius-bottomright: 40px; -webkit-border-bottom-left-radius: 40px;
        -webkit-border-bottom-right-radius: 40px; -webkit-border-top-left-radius: 40px;
        -webkit-border-top-right-radius: 40px;">
Your browser does not support the canvas element.
</canvas>
<script>
    Vector2 = function (x, y) {

        this.x = x || 0;
        this.y = y || 0;

    };

    Vector2.prototype = {

        constructor: Vector2,

        set: function (x, y) {

            this.x = x;
            this.y = y;

            return this;

        },

        copy: function (v) {

            this.x = v.x;
            this.y = v.y;

            return this;

        },

        clone: function () {

            return new Vector2(this.x, this.y);

        },


        add: function (v1, v2) {

            this.x = v1.x + v2.x;
            this.y = v1.y + v2.y;

            return this;

        },

        addSelf: function (v) {

            this.x += v.x;
            this.y += v.y;

            return this;

        },

        sub: function (v1, v2) {

            this.x = v1.x - v2.x;
            this.y = v1.y - v2.y;

            return this;

        },

        subSelf: function (v) {

            this.x -= v.x;
            this.y -= v.y;

            return this;

        },

        multiplyScalar: function (s) {

            this.x *= s;
            this.y *= s;

            return this;

        },

        divideScalar: function (s) {

            if (s) {

                this.x /= s;
                this.y /= s;

            } else {

                this.set(0, 0);

            }

            return this;

        },


        negate: function () {

            return this.multiplyScalar(-1);

        },

        dot: function (v) {

            return this.x * v.x + this.y * v.y;

        },

        lengthSq: function () {

            return this.x * this.x + this.y * this.y;

        },

        length: function () {

            return Math.sqrt(this.lengthSq());

        },

        normalize: function () {

            return this.divideScalar(this.length());

        },

        distanceTo: function (v) {

            return Math.sqrt(this.distanceToSquared(v));

        },

        distanceToSquared: function (v) {

            var dx = this.x - v.x, dy = this.y - v.y;
            return dx * dx + dy * dy;

        },


        setLength: function (l) {

            return this.normalize().multiplyScalar(l);

        },

        equals: function (v) {

            return ((v.x == this.x) && (v.y == this.y));

        }

    };
</script>
    <script type="text/javascript">

        var canvas = document.getElementById("myCanvas");
        var cxt = canvas.getContext("2d");
        var r = 15;
        var ball1 = {
            position: new Vector2(20, 98),
            r: r,
            vx: 350,
            vy: 0
        };
        var ball2 = {
            position: new Vector2(400, 105),
            r: r,
            vx: 0,
            vy: 0
        };
        var balls = [];
        balls.push(ball1);
        balls.push(ball2);
        cxt.fillStyle = "#030303";
        cxt.fillRect(0, 0, canvas.width, canvas.height);
        function init() {
            cxt.fillStyle = "#fff";
            for (i in balls) {
                cxt.beginPath();
                cxt.arc(balls[i].position.x, balls[i].position.y, balls[i].r, 0, Math.PI * 2, true);
                cxt.closePath();
                cxt.fill();
            }
        }
        init();
        var cyc = 20;

        var moveAsync = eval(Jscex.compile("async", function () {
            var tag = 0;
            while (true) {
                try {
                    cxt.fillStyle = "rgba(0, 0, 0, .3)";
                    cxt.fillRect(0, 0, canvas.width, canvas.height);
                    cxt.fillStyle = "#fff";
                    var distance = ball1.position.distanceTo(ball2.position);
               
                    if (distance <= ball1.r + ball2.r) {
                        var cosAngle = (ball1.position.x - ball2.position.x) / distance;
                        var sinAngle = (ball1.position.y - ball2.position.y) / distance;
                        var b1vx = ball1.vx;
                        var b1vy = ball1.vy;
                        var b2vx = ball2.vx;
                        var b2vy = ball2.vy;
                        ball2.vx += (b1vx * cosAngle * cosAngle + b1vy * sinAngle * cosAngle - b2vx * cosAngle * cosAngle - b2vy * sinAngle * cosAngle);
                        ball2.vy += (b1vx * cosAngle * sinAngle + b1vy * sinAngle * sinAngle - b2vx * cosAngle * sinAngle - b2vy * sinAngle * sinAngle);
                        ball1.vx += (-b1vx * cosAngle * cosAngle - b1vy * sinAngle * cosAngle + b2vx * cosAngle * cosAngle + b2vy * sinAngle * cosAngle);
                        ball1.vy += (-b1vx * cosAngle * sinAngle - b1vy * sinAngle * sinAngle + b2vx * cosAngle * sinAngle + b2vy * sinAngle * sinAngle);

                    }

                    for (i in balls) {
                        cxt.beginPath();
                        cxt.arc(balls[i].position.x, balls[i].position.y, balls[i].r, 0, Math.PI * 2, true);
                        cxt.closePath();
                        cxt.fill();
                     
                        if (balls[i].r + balls[i].position.x > canvas.width || balls[i].position.x < balls[i].r) balls[i].vx *= -1;
                        if (balls[i].r + balls[i].position.y > canvas.height || balls[i].position.y < balls[i].r) balls[i].vy *= -1;
                        balls[i].position.x += balls[i].vx * cyc / 1000;
                        balls[i].position.y += balls[i].vy * cyc / 1000;
                    }
                } catch (e) { alert(e); }
                $await(Jscex.Async.sleep(cyc));
            }
        }))


    </script>
    <style type="text/css">
        input.css3btn
        {
            background: -moz-linear-gradient(270deg, #d2ebf8, #0c8ab5);
            background: -webkit-linear-gradient(top, #d2ebf8, #0c8ab5);
            background: -o-linear-gradient(top, #d2ebf8, #0c8ab5);
            filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#000099CC', EndColorStr='#FF0087B4');
            border-top: 1px solid #38538c;
            border-right: 1px solid #1f2d4d;
            border-bottom: 1px solid #151e33;
            border-left: 1px solid #1f2d4d;
            border-radius: 4px;
            box-shadow: inset 0 1px 10px 1px #5c8bee, 0px 1px 0 #1d2c4d, 0 2px 0px #1f3053, 0 4px 4px 1px #111111;
            color: #f0f0f0;
            font: bold 20px "helvetica neue" , helvetica, arial, sans-serif;
            padding: 10px 0 10px 0;
            text-align: center;
            text-shadow: 0px -1px 1px #1e2d4d;
            width: 150px;
            background-clip: padding-box;
        }
        input.css3btn:hover
        {
            box-shadow: inset 0 0px 20px 1px #87adff, 0px 1px 0 #1d2c4d, 0 3px 0px #1f3053, 0 4px 4px 1px #111111;
            cursor: pointer;
        }
        input.css3btn:active
        {
            box-shadow: inset 0 1px 10px 1px #5c8bee, 0 1px 0 #1d2c4d, 0 2px 0 #1f3053, 0 4px 3px 0 #111111;
            margin-top: 1px;
        }
    </style>
    <input class="css3btn" value="运行" onclick="moveAsync().start();" type="button" />
</body>
</html>

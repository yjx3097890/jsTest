  


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
</head>
<body>
    <script src="../../script/jscex.jscexRequire.min.js" type="text/javascript"></script>
    <canvas id="mycanvas2" width="600" height="500" style="border: 15px solid gray; -moz-border-radius-bottomleft: 40px;
        -moz-border-radius-bottomright: 40px; -webkit-border-bottom-left-radius: 40px;
        -webkit-border-bottom-right-radius: 40px; -webkit-border-top-left-radius: 40px;
        -webkit-border-top-right-radius: 40px;">
Your browser does not support the canvas2 element.
</canvas>
    <script type="text/javascript">
        Vector2 = function (x, y) {

            this.x = x || 0;
            this.y = y || 0;

        };
        Vector2.prototype = {
            constructor: Vector2,
            distanceTo: function (v) {
                return Math.sqrt(this.distanceToSquared(v));
            },
            distanceToSquared: function (v) {
                var dx = this.x - v.x, dy = this.y - v.y;
                return dx * dx + dy * dy;
            }
        };
        var canvas2 = document.getElementById("mycanvas2");
        var ctx = canvas2.getContext("2d");
        ctx.fillStyle = "#030303";
        ctx.fillRect(0, 0, canvas2.width, canvas2.height);
        var balls = [];
        function getRandomNumber(min, max) {
            return (min + Math.floor(Math.random() * (max - min + 1)))
        }
        for (var i = 0; i < 5; i++) {
            var ball = {
                position: new Vector2(250, 200),
                r: 10,
                v: getRandomNumber(50, 200),
                direction: (getRandomNumber(0, 360) / 360) * 2 * Math.PI
            };
            balls.push(ball);
        }

        var cyc = 10;
        var bigCircularity = {
            position: new Vector2(300, 250),
            r: 190
        }
        var moveAsync = eval(Jscex.compile("async", function () {
            while (true) {
                try {
                    ctx.fillStyle = "rgba(0, 0, 0, .3)";
                    ctx.fillRect(0, 0, canvas2.width, canvas2.height);
                    ctx.fillStyle = "#fff";
                    ctx.strokeStyle = "#fff";
                    ctx.beginPath();
                    ctx.arc(bigCircularity.position.x, bigCircularity.position.y, bigCircularity.r, 0, Math.PI * 2, false);

                    ctx.stroke();
                    for (i in balls) {
                        ctx.beginPath();
                        ctx.arc(balls[i].position.x, balls[i].position.y, balls[i].r, 0, Math.PI * 2, true);
                        ctx.closePath();
                        ctx.fill();

                        var distance = balls[i].position.distanceTo(bigCircularity.position);
                     

                        if (Math.round(Math.pow(balls[i].position.x - bigCircularity.position.x, 2) + Math.pow(bigCircularity.position.y - balls[i].position.y, 2)) >= Math.round(Math.pow(bigCircularity.r - balls[i].r, 2))) {

                            var cD = balls[i].direction;
                            var step = Math.acos((balls[i].position.x - bigCircularity.position.x) / distance)
                            if (balls[i].position.y > bigCircularity.position.y) {
                                balls[i].direction = -cD - Math.PI + 2 * step;

                            }
                            else {
                                balls[i].direction = -cD + Math.PI - 2 * step;
                            }


                        }


                        balls[i].position.x += balls[i].v * Math.cos(balls[i].direction) * cyc / 1000;
                        balls[i].position.y += balls[i].v * Math.sin(balls[i].direction) * cyc / 1000;
                    }
                }
                catch (e) {
                    alert(e)
                }
                $await(Jscex.Async.sleep(cyc));
            }
        }))
  
    </script>
    <style type="text/css">
        input.css3btn
        {
            background: -moz-linear-gradient(270deg, #d2ebf8, #0c8ab5);
            background: -webkit-linear-gradient(top, #d2ebf8, #0c8ab5);
            background: -o-linear-gradient(top, #d2ebf8, #0c8ab5);
            filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#000099CC', EndColorStr='#FF0087B4');
            border-top: 1px solid #38538c;
            border-right: 1px solid #1f2d4d;
            border-bottom: 1px solid #151e33;
            border-left: 1px solid #1f2d4d;
            border-radius: 4px;
            box-shadow: inset 0 1px 10px 1px #5c8bee, 0px 1px 0 #1d2c4d, 0 2px 0px #1f3053, 0 4px 4px 1px #111111;
            color: #f0f0f0;
            font: bold 20px "helvetica neue" , helvetica, arial, sans-serif;
            padding: 10px 0 10px 0;
            text-align: center;
            text-shadow: 0px -1px 1px #1e2d4d;
            width: 150px;
            background-clip: padding-box;
        }
        input.css3btn:hover
        {
            box-shadow: inset 0 0px 20px 1px #87adff, 0px 1px 0 #1d2c4d, 0 3px 0px #1f3053, 0 4px 4px 1px #111111;
            cursor: pointer;
        }
        input.css3btn:active
        {
            box-shadow: inset 0 1px 10px 1px #5c8bee, 0 1px 0 #1d2c4d, 0 2px 0 #1f3053, 0 4px 3px 0 #111111;
            margin-top: 1px;
        }
    </style>
    <input class="css3btn" value="运行" onclick="moveAsync().start();" type="button" />
</body>
</html>




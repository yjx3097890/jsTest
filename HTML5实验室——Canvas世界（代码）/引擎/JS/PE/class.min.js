var Class = (function () { var e = (function () { for (var p in { toString: 1 }) { if (p === 'toString') return false } return true })(); function subclass() { }; function create() { var a = null; var b = arguments.length || 0, properties = new Array(b); while (b--) properties[b] = arguments[b]; if (Object.isFunction(properties[0])) a = properties.shift(); function klass() { this.initialize.apply(this, arguments) } Object.extend(klass, Class.Methods); klass.superclass = a; klass.subclasses = []; klass.staticmethods = {}; if (a) { subclass.prototype = a.prototype; klass.prototype = new subclass; a.subclasses.push(klass); Object.extend(klass.staticmethods, a.staticmethods); Object.extend(klass, klass.staticmethods) } for (var i = 0, b = properties.length; i < b; i++) klass.addMethods(properties[i]); if (!klass.prototype.initialize) klass.prototype.initialize = function () { }; klass.prototype.constructor = klass; return klass } function addMethods(a) { var b = this.superclass && this.superclass.prototype, properties = Object.keys(a); if (e) { if (a.toString != Object.prototype.toString) properties.push("toString"); if (a.valueOf != Object.prototype.valueOf) properties.push("valueOf") } for (var i = 0, length = properties.length; i < length; i++) { var c = properties[i], value = a[c]; if (Object.isFunction(value)) { var f = value.staticIsSet; if (b && value.argumentNames()[0] == "$super") { var d = value; value = (function (m) { return function () { return b[m].apply(this, arguments) } })(c).wrap(d); value.valueOf = d.valueOf.bind(d); value.toString = d.toString.bind(d) } if (f) { value = value.bind(this); this.staticmethods[c] = value; this[c] = value; if (this.subclasses.length > 0) throw "Addind a static method after subclassing is not implimented"; } } this.prototype[c] = value } return this } return { create: create, Methods: { addMethods: addMethods}} })(); (function () { var j = Object.prototype.toString, _hasOwnProperty = Object.prototype.hasOwnProperty, NULL_TYPE = 'Null', UNDEFINED_TYPE = 'Undefined', BOOLEAN_TYPE = 'Boolean', NUMBER_TYPE = 'Number', STRING_TYPE = 'String', OBJECT_TYPE = 'Object', FUNCTION_CLASS = '[object Function]', BOOLEAN_CLASS = '[object Boolean]', NUMBER_CLASS = '[object Number]', STRING_CLASS = '[object String]', ARRAY_CLASS = '[object Array]', DATE_CLASS = '[object Date]', NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON && typeof JSON.stringify === 'function' && JSON.stringify(0) === '0'; var k = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor']; var l = (function () { for (var p in { toString: 1 }) { if (p === 'toString') return false } return true })(); function Type(o) { switch (o) { case null: return NULL_TYPE; case (void 0): return UNDEFINED_TYPE } var a = typeof o; switch (a) { case 'boolean': return BOOLEAN_TYPE; case 'number': return NUMBER_TYPE; case 'string': return STRING_TYPE } return OBJECT_TYPE } function extend(a, b) { for (var c in b) a[c] = b[c]; return a } function inspect(a) { try { if (isUndefined(a)) return 'undefined'; if (a === null) return 'null'; return a.inspect ? a.inspect() : String(a) } catch (e) { if (e instanceof RangeError) return '...'; throw e; } } function toJSON(a) { return Str('', { '': a }, []) } function Str(a, b, c) { var d = b[a], type = typeof d; if (Type(d) === OBJECT_TYPE && typeof d.toJSON === 'function') { d = d.toJSON(a) } var e = j.call(d); switch (e) { case NUMBER_CLASS: case BOOLEAN_CLASS: case STRING_CLASS: d = d.valueOf() } switch (d) { case null: return 'null'; case true: return 'true'; case false: return 'false' } type = typeof d; switch (type) { case 'string': return d.inspect(true); case 'number': return isFinite(d) ? String(d) : 'null'; case 'object': for (var i = 0, length = c.length; i < length; i++) { if (c[i] === d) { throw new TypeError(); } } c.push(d); var f = []; if (e === ARRAY_CLASS) { for (var i = 0, length = d.length; i < length; i++) { var g = Str(i, d, c); f.push(typeof g === 'undefined' ? 'null' : g) } f = '[' + f.join(',') + ']' } else { var h = Object.keys(d); for (var i = 0, length = h.length; i < length; i++) { var a = h[i], g = Str(a, d, c); if (typeof g !== "undefined") { f.push(a.inspect(true) + ':' + g) } } f = '{' + f.join(',') + '}' } c.pop(); return f } } function stringify(a) { return JSON.stringify(a) } function toQueryString(a) { return $H(a).toQueryString() } function toHTML(a) { return a && a.toHTML ? a.toHTML() : String.interpret(a) } function keys(a) { if (Type(a) !== OBJECT_TYPE) { throw new TypeError(); } var b = []; for (var c in a) { if (_hasOwnProperty.call(a, c)) b.push(c) } if (l) { for (var i = 0; c = k[i]; i++) { if (_hasOwnProperty.call(a, c)) b.push(c) } } return b } function values(a) { var b = []; for (var c in a) b.push(a[c]); return b } function clone(a) { return extend({}, a) } function isElement(a) { return !!(a && a.nodeType == 1) } function isArray(a) { return j.call(a) === ARRAY_CLASS } var m = (typeof Array.isArray == 'function') && Array.isArray([]) && !Array.isArray({}); if (m) { isArray = Array.isArray } function isHash(a) { return a instanceof Hash } function isFunction(a) { return j.call(a) === FUNCTION_CLASS } function isString(a) { return j.call(a) === STRING_CLASS } function isNumber(a) { return j.call(a) === NUMBER_CLASS } function isDate(a) { return j.call(a) === DATE_CLASS } function isUndefined(a) { return typeof a === "undefined" } extend(Object, { extend: extend, inspect: inspect, toJSON: NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON, toQueryString: toQueryString, toHTML: toHTML, keys: Object.keys || keys, values: values, clone: clone, isElement: isElement, isArray: isArray, isHash: isHash, isFunction: isFunction, isString: isString, isNumber: isNumber, isDate: isDate, isUndefined: isUndefined }) })(); Object.extend(Function.prototype, (function () { var e = Array.prototype.slice; function update(a, b) { var c = a.length, length = b.length; while (length--) a[c + length] = b[length]; return a } function merge(a, b) { a = e.call(a, 0); return update(a, b) } function argumentNames() { var a = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '').replace(/\s+/g, '').split(','); return a.length == 1 && !a[0] ? [] : a } function bind(b) { if (arguments.length < 2 && Object.isUndefined(arguments[0])) return this; var c = this, args = e.call(arguments, 1); return function () { var a = merge(args, arguments); return c.apply(b, a) } } function bindAsEventListener(c) { var d = this, args = e.call(arguments, 1); return function (b) { var a = update([b || window.event], args); return d.apply(c, a) } } function curry() { if (!arguments.length) return this; var b = this, args = e.call(arguments, 0); return function () { var a = merge(args, arguments); return b.apply(this, a) } } function delay(a) { var b = this, args = e.call(arguments, 1); a = a * 1000; return window.setTimeout(function () { return b.apply(b, args) }, a) } function defer() { var a = update([0.01], arguments); return this.delay.apply(this, a) } function wrap(b) { var c = this; return function () { var a = update([c.bind(this)], arguments); return b.apply(this, a) } } function methodize() { if (this._methodized) return this._methodized; var b = this; return this._methodized = function () { var a = update([this], arguments); return b.apply(null, a) } } function setStatic() { this.staticIsSet = true; return this } return { setStatic: setStatic, argumentNames: argumentNames, bind: bind, bindAsEventListener: bindAsEventListener, curry: curry, delay: delay, defer: defer, wrap: wrap, methodize: methodize} })());